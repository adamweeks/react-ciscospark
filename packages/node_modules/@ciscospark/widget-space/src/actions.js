import {validateAndDecodeId} from '@ciscospark/react-component-utils';
import {addError} from '@ciscospark/redux-module-errors';

import messages from './messages';


export const FETCH_SPACE_ERROR = `widget-space/FETCH_SPACE_ERROR`;
export const STORE_TO_PERSON = `widget-space/STORE_TO_PERSON`;
export const FETCHING_SPACE_DETAILS = `widget-space/FETCHING_SPACE_DETAILS`;
export const STORE_ACTIVITY_TYPES = `widget-space/STORE_ACTIVITY_TYPES`;
export const STORE_SPACE_DETAILS = `widget-space/STORE_SPACE_DETAILS`;
export const TOGGLE_ACTIVITY_MENU_VISIBLE = `widget-space/TOGGLE_ACTIVITY_MENU_VISIBLE`;
export const UPDATE_ACTIVITY_TYPE = `widget-space/UPDATE_ACTIVITY_TYPE`;
export const UPDATE_ACTIVITY_TYPE_SECONDARY = `widget-space/UPDATE_ACTIVITY_TYPE_SECONDARY`;
export const UPDATE_ACTIVITY_MENU_VISIBLE = `widget-space/UPDATE_ACTIVITY_MENU_VISIBLE`;

export function updateActivityType(type) {
  return {
    type: UPDATE_ACTIVITY_TYPE,
    payload: {
      type
    }
  };
}

export function updateSecondaryActivityType(type) {
  return {
    type: UPDATE_ACTIVITY_TYPE_SECONDARY,
    payload: {
      type
    }
  };
}

export function storeToPerson(toPerson) {
  return {
    type: STORE_TO_PERSON,
    payload: {
      toPerson
    }
  };
}

export function updateActivityMenuVisible(isActivityMenuVisible) {
  return {
    type: UPDATE_ACTIVITY_MENU_VISIBLE,
    payload: {
      isActivityMenuVisible
    }
  };
}

export function toggleActivityMenuVisible() {
  return {
    type: TOGGLE_ACTIVITY_MENU_VISIBLE
  };
}

export function storeSpaceDetails(details) {
  return {
    type: STORE_SPACE_DETAILS,
    payload: {
      details
    }
  };
}

export function storeActivityTypes(activityTypes) {
  return {
    type: STORE_ACTIVITY_TYPES,
    payload: {
      activityTypes
    }
  };
}


function fetchingSpaceDetails() {
  return {
    type: FETCHING_SPACE_DETAILS
  };
}

/**
 * Gets details about the space
 * @param {Object} sparkInstance
 * @param {String} spaceId
 * @param {Object} intl
 * @returns {Thunk}
 */
export function getSpaceDetails(sparkInstance, spaceId, intl) {
  return (dispatch) => {
    const {formatMessage} = intl;
    const spaceIdUUID = validateAndDecodeId(spaceId);
    if (!spaceIdUUID) {
      const displayTitle = formatMessage(messages.unableToLoad);
      const displaySubtitle = formatMessage(messages.badSpaceId);
      return dispatch(addError({
        id: `getSpace.badId`,
        displayTitle,
        displaySubtitle,
        temporary: false
      }));
    }
    dispatch(fetchingSpaceDetails());
    return sparkInstance.request({
      service: `hydra`,
      resource: `/rooms/${spaceIdUUID}`
    })
    .then((res) => dispatch(storeSpaceDetails(res.body)))
    .catch((error) => {
      const displayTitle = formatMessage(messages.unableToLoad);
      let displaySubtitle;
      if (error.statusCode === 401) {
        displaySubtitle = formatMessage(messages.errorBadToken);
      }
      else if (error.statusCode === 404) {
        displaySubtitle = formatMessage(messages.errorNotFound);
      }
      return dispatch(addError({
        id: `getSpace.hydraFail`,
        displayTitle,
        displaySubtitle,
        temporary: false,
        code: error.statusCode
      }));
    });
  };
}
