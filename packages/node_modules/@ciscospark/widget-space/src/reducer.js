import {fromJS} from 'immutable';
import {reducers as message} from '@ciscospark/widget-message';
import {reducers as meet} from '@ciscospark/widget-meet';
import errors from '@ciscospark/redux-module-errors';
import mercury from '@ciscospark/redux-module-mercury';
import media from '@ciscospark/redux-module-media';
import user from '@ciscospark/redux-module-user';

import {
  FETCH_SPACE_ERROR,
  FETCHING_SPACE_DETAILS,
  STORE_SPACE_DETAILS,
  STORE_ACTIVITY_TYPES,
  STORE_TO_PERSON,
  TOGGLE_ACTIVITY_MENU_VISIBLE,
  UPDATE_ACTIVITY_MENU_VISIBLE,
  UPDATE_ACTIVITY_TYPE,
  UPDATE_ACTIVITY_TYPE_SECONDARY
} from './actions';

export const initialState = fromJS({
  activityTypes: [],
  error: null,
  primaryActivityType: null,
  secondaryActivityType: null,
  spaceDetails: null,
  status: {
    activityMenuVisible: false,
    hasError: false,
    isFetchingSpaceDetails: false
  }
});

// eslint-disable-next-line complexity
export function reducer(state = initialState, action) {
  switch (action.type) {
  case UPDATE_ACTIVITY_MENU_VISIBLE:
    return state.set(`activityMenuVisible`, action.payload.isActivityMenuVisible);

  case UPDATE_ACTIVITY_TYPE:
    return state.set(`primaryActivityType`, action.payload.type)
      .set(`secondaryActivityType`, null)
      .setIn([`status`, `activityMenuVisible`], false);

  case UPDATE_ACTIVITY_TYPE_SECONDARY:
    return state.set(`secondaryActivityType`, action.payload.type)
      .setIn([`status`, `activityMenuVisible`], false);

  case TOGGLE_ACTIVITY_MENU_VISIBLE:
    return state.setIn([`status`, `activityMenuVisible`], !state.getIn([`status`, `activityMenuVisible`]));

  case FETCHING_SPACE_DETAILS:
    return state.setIn([`status`, `isFetchingSpaceDetails`], true);

  case STORE_SPACE_DETAILS:
    return state.setIn([`status`, `isFetchingSpaceDetails`], false)
      .set(`spaceDetails`, fromJS(Object.assign({}, action.payload.details)));

  case STORE_ACTIVITY_TYPES: {
    return state.set(`activityTypes`, fromJS(action.payload.activityTypes));
  }

  case STORE_TO_PERSON: {
    return state.set(`toPerson`, action.payload.toPerson);
  }

  case FETCH_SPACE_ERROR:
    return state
      .setIn([`status`, `isFetchingSpaceDetails`], false)
      .setIn([`status`, `hasError`], true)
      .set(`error`, fromJS(action.payload.error));

  default:
    return state;
  }
}

const reducers = {
  ...message,
  ...meet,
  errors,
  user,
  mercury,
  media,
  widgetSpace: reducer
};

export default reducers;
