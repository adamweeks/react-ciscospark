import 'react-virtualized/styles.css';

import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import {List, AutoSizer} from 'react-virtualized';

import Person from './list-item';
import styles from './styles.css';

const propTypes = {
  items: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string,
    people: PropTypes.arrayOf(PropTypes.shape({
      displayName: PropTypes.string,
      emailAddress: PropTypes.string,
      id: PropTypes.string,
      isExternal: PropTypes.bool,
      isPending: PropTypes.bool
    }))
  })).isRequired,
  onItemClick: PropTypes.func,
  onDisplayUsers: PropTypes.func
};

const defaultProps = {
  onItemClick: () => {},
  onDisplayUsers: () => {}
};

function PeopleList({
  items,
  onItemClick,
  onDisplayUsers
}) {
  if (!items || !items.length) {
    return null;
  }

  const totalRows = [];

  items.forEach((item) => {
    // Header for item
    if (item.label) {
      totalRows.push({type: 'header', details: item.label});
    }
    // Rows for each person
    item.people.forEach((person) => {
      totalRows.push({type: 'person', details: person});
    });
  });

  // disable react/prop-types because eslint thinks rowRenderer is the main render
  // eslint-disable-next-line react/prop-types
  function rowRenderer({key, index, style}) {
    if (totalRows[index].type === 'header') {
      return (
        <div style={style} className={classNames('ciscospark-people-group', styles.group)} key={totalRows[index].details}>
          {
            totalRows[index].details
            && <h3 className={classNames('ciscospark-people-group-title', styles.title)}>{totalRows[index].details}</h3>
          }
        </div>
      );
    }

    const person = totalRows[index].details;

    const handleItemClick = () => {
      onItemClick(person);
    };

    return (
      <div key={key} style={style}>
        <Person
          displayName={person.displayName || person.name}
          key={person.id}
          onClick={handleItemClick}
          emailAddress={person.emailAddress}
          id={person.id}
          isExternal={person.isExternal}
          isPending={person.isPending}
        />
      </div>
    );
  }

  function onRowsRendered({startIndex, stopIndex}) {
    // gets users from displayed rows that are not labels
    const userIds = totalRows.slice(startIndex, stopIndex).filter((row) => row.type === 'person').map((p) => p.details.id);
    onDisplayUsers(userIds);
  }

  function rowHeight({index}) {
    // height for a header label (moderators, participants)
    if (totalRows[index].type === 'header') {
      return 38;
    }
    // height for a person item
    return 44;
  }

  return (
    <div className={classNames('ciscospark-people-list', styles.list)}>
      {
        <AutoSizer>
          {({height, width}) => (
            <List
              height={height}
              rowCount={totalRows.length}
              rowHeight={rowHeight}
              rowRenderer={rowRenderer}
              width={width}
              onRowsRendered={onRowsRendered}
            />
          )}
        </AutoSizer>
      }
    </div>
  );
}


PeopleList.propTypes = propTypes;
PeopleList.defaultProps = defaultProps;

export default PeopleList;
