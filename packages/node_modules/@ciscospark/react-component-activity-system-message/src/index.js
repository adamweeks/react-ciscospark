import React, {PropTypes} from 'react';
import classNames from 'classnames';

import {FormattedMessage} from 'react-intl';

import messages from './messages';
import styles from './styles.css';

export const SYSTEM_MESSAGE_VERB_TOMBSTONE = `tombstone`;
export const SYSTEM_MESSAGE_VERB_CREATE = `create`;
export const SYSTEM_MESSAGE_VERB_UPDATE = `update`;
export const SYSTEM_MESSAGE_VERBS = [SYSTEM_MESSAGE_VERB_CREATE, SYSTEM_MESSAGE_VERB_TOMBSTONE, SYSTEM_MESSAGE_VERB_UPDATE];

export default function ActivitySystemMessage(props) {
  const {
    callData,
    isSelf,
    name,
    timestamp,
    verb
  } = props;

  let systemMessage;
  switch (verb) {
  case SYSTEM_MESSAGE_VERB_CREATE: {
    if (isSelf) {
      systemMessage = <FormattedMessage {...messages.youCreate} />;
    }
    else {
      systemMessage = <FormattedMessage {...messages.someoneCreate} values={{name}} />;
    }
    break;
  }
  case SYSTEM_MESSAGE_VERB_TOMBSTONE: {
    if (isSelf) {
      systemMessage = <FormattedMessage {...messages.youDelete} />;
    }
    else {
      systemMessage = <FormattedMessage {...messages.someoneDelete} values={{name}} />;
    }
    break;
  }
  case SYSTEM_MESSAGE_VERB_UPDATE: {
    systemMessage = <FormattedMessage {...messages[callData.status]} values={{...callData.callInfo}} />;
    break;
  }
  default:
    return null;
  }

  return (
    <div className={classNames(`ciscospark-system-message`, styles.systemMessage)}>
      {systemMessage} {timestamp}
    </div>
  );
}

ActivitySystemMessage.propTypes = {
  callData: PropTypes.object,
  isSelf: PropTypes.bool,
  name: PropTypes.string.isRequired,
  timestamp: PropTypes.string,
  verb: PropTypes.string.isRequired
};
