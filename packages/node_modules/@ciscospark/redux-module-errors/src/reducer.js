import {Map, OrderedMap} from 'immutable';

import {
  ADD_ERROR,
  REMOVE_ERROR
} from './actions';

export const initialState = new Map({
  errors: new OrderedMap(),
  hasError: false
});


// eslint-disable-next-line complexity
export default function reducer(state = initialState, action) {
  switch (action.type) {
  case ADD_ERROR:
    {
      const {error} = action.payload;
      const errorMap = new Map([[error.id, error]]);
      return state.mergeIn([`errors`], errorMap)
        .set(`hasError`, true);
    }
  case REMOVE_ERROR:
    {
      const errorId = action.payload.errorId;
      const updatedState = state.deleteIn([`errors`, errorId]);
      if (updatedState.get(`errors`).length === 0) {
        return updatedState.set(`hasError`, false);
      }
      return updatedState;
    }
  default:
    return state;
  }
}
