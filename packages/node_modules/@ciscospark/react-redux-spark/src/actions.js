export const UPDATE_SPARK_STATUS = `spark/UPDATE_SPARK_STATUS`;
export function updateSparkStatus(status) {
  return {
    type: UPDATE_SPARK_STATUS,
    payload: {
      status
    }
  };
}

export const STORE_SPARK_INSTANCE = `spark/STORE_SPARK_INSTANCE`;
export function storeSparkInstance(spark) {
  return {
    type: STORE_SPARK_INSTANCE,
    payload: {
      spark
    }
  };
}


export function registerDevice(spark) {
  return (dispatch) => {
    dispatch(updateSparkStatus({registering: true}));
    return spark.device.register()
      .then(() => dispatch(updateSparkStatus({registering: false, registered: true})));
  };
}

export function connectToMercury(spark) {
  return (dispatch, getState) => {
    dispatch(updateSparkStatus({connecting: true}));
    return spark.mercury.connect()
      .then(() => dispatch(updateSparkStatus({connecting: false, connected: true})))
      .then(() => {
        // Detect changes in connection state
        spark.mercury.on(`change:connected`, () => {
          const currentStatus = getState()[`spark`].get(`status`).toJS();
          const connected = spark.mercury.connected;
          let {disconnected} = currentStatus;
          if (currentStatus.connected && !connected) {
            disconnected = true;
          }
          else if (connected && !currentStatus.connected) {
            disconnected = false;
          }
          dispatch(updateSparkStatus({
            connected,
            disconnected
          }));
        });
      });
  };
}
