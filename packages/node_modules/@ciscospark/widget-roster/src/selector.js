import {createSelector} from 'reselect';

const getSparkInstance = (state, props) => props.sparkInstance || state.spark.get(`spark`);
const getConversation = (state) => state.conversation;
const getUser = (state) => state.user;
const getAvatars = (state) => state.avatar;

export const getRosterWidgetProps = createSelector(
  [
    getSparkInstance,
    getConversation,
    getUser,
    getAvatars
  ],
  (sparkInstance, conversation, user, avatars) => {
    const propsObject = {};
    propsObject.sparkInstance = sparkInstance;
    const participants = conversation.get(`participants`).toJS();
    const currentUser = user.get(`currentUser`);
    let externalParticipants = false;
    const currentUserParticipant = participants
      .filter((participant) => participant.id === currentUser.id)
      .map((participant) => {
        participant.avatar = avatars.getIn([`items`, participant.id]);
        return participant;
      });
    const otherParticipants = participants
      .filter((participant) => participant.id !== currentUser.id)
      .map((participant) => {
        participant.avatar = avatars.getIn([`items`, participant.id]);
        participant.external = currentUser && currentUser.orgId !== `consumer` && currentUser.orgId !== participant.orgId;
        if (participant.external) {
          externalParticipants = true;
        }
        return participant;
      })
      .sort((participantA, participantB) => {
        const A = participantA.name;
        const B = participantB.name;
        // eslint-disable-next-line no-nested-ternary
        return A < B ? -1 : A > B ? 1 : 0;
      });

    propsObject.externalParticipants = externalParticipants;
    propsObject.participants = participants;
    propsObject.participantsCurrentUser = currentUserParticipant;
    propsObject.participantsOther = otherParticipants;
    return propsObject;
  }
);
