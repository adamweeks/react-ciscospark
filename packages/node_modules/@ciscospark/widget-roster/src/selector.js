import {createSelector} from 'reselect';

const getSparkInstance = (state, props) => props.sparkInstance || state.spark.get(`spark`);
const getConversation = (state) => state.conversation;
const getUser = (state) => state.user;
const getAvatars = (state) => state.avatar;

export const getRosterWidgetProps = createSelector(
  [
    getSparkInstance,
    getConversation,
    getUser,
    getAvatars
  ],
  (sparkInstance, conversation, user, avatars) => {
    const propsObject = {};
    propsObject.sparkInstance = sparkInstance;
    const participants = conversation.get(`participants`).toJS();
    const currentUser = user.get(`currentUser`);
    let hasExternalParticipants = false;

    const sortParticipants = (participantA, participantB) => {
      const A = participantA.name;
      const B = participantB.name;
      // eslint-disable-next-line no-nested-ternary
      return A < B ? -1 : A > B ? 1 : 0;
    };

    const mapParticipant = (participant) => {
      participant.avatar = avatars.getIn([`items`, participant.id]);
      participant.external = currentUser && currentUser.orgId !== `consumer` && currentUser.orgId !== participant.orgId;
      if (participant.external) {
        hasExternalParticipants = true;
      }
      return participant;
    };

    const currentUserParticipant = [];
    const moderatorParticipants = [];
    const otherParticipants = [];
    participants
      .sort(sortParticipants)
      .forEach((p) => {
        const participant = mapParticipant(p);
        if (participant.id === currentUser.id) {
          currentUserParticipant.push(participant);
        }
        else if (participant.roomProperties.isModerator) {
          moderatorParticipants.push(participant);
        }
        else {
          otherParticipants.push(participant);
        }
      });

    propsObject.hasExternalParticipants = hasExternalParticipants;
    propsObject.participants = participants;
    propsObject.participantsCurrentUser = currentUserParticipant;
    propsObject.participantsOther = otherParticipants;
    propsObject.participantsModerators = moderatorParticipants;
    return propsObject;
  }
);
