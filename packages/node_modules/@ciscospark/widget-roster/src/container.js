import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';

import {fetchAvatarsForUsers} from '@ciscospark/redux-module-avatar';
import {
  getConversation
} from '@ciscospark/redux-module-conversation';

import LoadingScreen from '@ciscospark/react-component-loading-screen';

import {getRosterWidgetProps} from './selector';

/**
 * RosterWidget Container
 * @extends Component
 */
export class RosterWidget extends Component {

  /**
   * Renders the main area of the widget
   *
   * @returns {object}
   */
  render() {
    if (!this.props.conversation.has(`participants`)) {
      return <LoadingScreen />;
    }
    const participants = this.props.conversation.get(`participants`).toJS().map((participant) => {
      return (
        <div key={participant.id}>
          {participant.displayName}
        </div>
      );
    });
    return <div>{participants}</div>;
  }
}

const injectedPropTypes = {
  conversation: PropTypes.object.isRequired,
  sparkInstance: PropTypes.object,
  user: PropTypes.object.isRequired,
  widgetRoster: PropTypes.object.isRequired,
  getConversation: PropTypes.func.isRequired
};

export const ownPropTypes = {
  onEvent: PropTypes.func,
  spaceId: PropTypes.string,
  eventNames: PropTypes.object
};

RosterWidget.propTypes = {
  ...ownPropTypes,
  ...injectedPropTypes
};

export default connect(
  getRosterWidgetProps,
  (dispatch) => bindActionCreators({
    fetchAvatarsForUsers,
    getConversation
  }, dispatch)
)(RosterWidget);
