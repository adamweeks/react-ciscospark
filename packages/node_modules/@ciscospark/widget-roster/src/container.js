import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import classNames from 'classnames';
import {autobind} from 'core-decorators';

import {fetchAvatarsForUsers} from '@ciscospark/redux-module-avatar';

import LoadingScreen from '@ciscospark/react-component-loading-screen';
import Button from '@ciscospark/react-component-button';

import {
  ICON_TYPE_EXTERNAL_USER_OUTLINE,
  ICON_TYPE_EXIT,
  ICON_TYPE_WAFFLE,
  default as Icon
} from '@ciscospark/react-component-icon';

import {getRosterWidgetProps} from './selector';
import styles from './styles.css';

import ParticipantList from './components/participant-list';

/**
 * RosterWidget Container
 * @extends Component
 */
export class RosterWidget extends Component {

  shouldComponentUpdate(nextProps) {
    return nextProps.conversation.get(`participants`) !== this.props.conversation.get(`participants`) ||
      nextProps.avatar.get(`items`) !== this.props.avatar.get(`items`);
  }

  componentWillUpdate(nextProps) {
    this.props.fetchAvatarsForUsers(nextProps.participants.map((user) => user.userId), this.props.sparkInstance);
  }

  @autobind
  handleMenuClick() {
    this.props.onClickMenu();
  }

  @autobind
  handleCloseClick() {
    this.props.onClickClose();
  }

  /**
   * Renders the main area of the widget
   *
   * @returns {object}
   */
  render() {
    let mainArea;
    let participantCountDisplay;
    // eslint-disable-next-line no-negated-condition
    if (!this.props.conversation.has(`participants`)) {
      mainArea = <LoadingScreen />;
    }
    else {
      const {externalParticipants, participantsCurrentUser, participantsOther} = this.props;
      let externalParticipantsMessage;
      if (externalParticipants) {
        // eslint-disable-next-line no-extra-parens
        externalParticipantsMessage = (
          <div className={classNames(`ciscospark-has-external`, styles.external)}>
            <div className={classNames(`ciscospark-has-external-icon`, styles.externalIcon)}>
              <Icon type={ICON_TYPE_EXTERNAL_USER_OUTLINE} />
            </div>
            <div>{`People outside your company are included in this space`}</div>
          </div>
        );
      }
      // eslint-disable-next-line no-extra-parens
      mainArea = (
        <div>
          {
            externalParticipantsMessage
          }
          <div><ParticipantList participants={participantsCurrentUser} /></div>
          <div className={classNames(`ciscospark-roster-participants-separator`, styles.participantsSeparator)}>{`Participants`}</div>
          <div><ParticipantList participants={participantsOther} /></div>
        </div>
      );
      participantCountDisplay = `(${this.props.participants.length})`;
    }
    return (
      <div className={classNames(`ciscospark-roster`, styles.roster)}>
        <div className={classNames(`ciscospark-roster-header`, styles.rosterHeader)}>
          <div className={classNames(`ciscospark-roster-close`, styles.rosterClose)}>
            <div className={classNames(`ciscospark-roster-close-button`, styles.rosterCloseButton)}>
              <Button accessibilityLabel={`Close`} iconType={ICON_TYPE_EXIT} onClick={this.handleCloseClick} />
            </div>
          </div>
          <div className={classNames(`ciscospark-roster-title`, styles.rosterTitle)}>
            {`People ${participantCountDisplay}`}
          </div>
          <div className={classNames(`ciscospark-roster-menu`, styles.rosterMenu)}>
            <div className={classNames(`ciscospark-activity-menu-button`, styles.activityMenuButton)}>
              <Button accessibilityLabel={`Main Menu`} iconType={ICON_TYPE_WAFFLE} onClick={this.handleMenuClick} />
            </div>
          </div>
        </div>
        {mainArea}
      </div>
    );
  }
}

const injectedPropTypes = {
  conversation: PropTypes.object.isRequired,
  externalParticipants: PropTypes.bool.isRequired,
  participants: PropTypes.array.isRequired,
  participantsCurrentUser: PropTypes.array.isRequired,
  participantsOther: PropTypes.array.isRequired,
  sparkInstance: PropTypes.object,
  user: PropTypes.object.isRequired,
  widgetRoster: PropTypes.object.isRequired
};

export const ownPropTypes = {
  onClickClose: PropTypes.func,
  onClickMenu: PropTypes.func,
  onEvent: PropTypes.func,
  spaceId: PropTypes.string,
  eventNames: PropTypes.object
};

RosterWidget.propTypes = {
  ...ownPropTypes,
  ...injectedPropTypes
};

export default connect(
  getRosterWidgetProps,
  (dispatch) => bindActionCreators({
    fetchAvatarsForUsers
  }, dispatch)
)(RosterWidget);
